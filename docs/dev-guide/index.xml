<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev-guides on EngineBlock</title>
    <link>http://docs.engineblock.io/dev-guide/</link>
    <description>Recent content in Dev-guides on EngineBlock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>APL 2.0</copyright>
    <lastBuildDate>Fri, 19 May 2017 21:52:39 +0000</lastBuildDate>
    
	<atom:link href="http://docs.engineblock.io/dev-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EngineBlock Dev Guide</title>
      <link>http://docs.engineblock.io/dev-guide/</link>
      <pubDate>Fri, 19 May 2017 21:52:39 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/</guid>
      <description>Conduct It&amp;rsquo;s simple really. Everything in the Open Code of Conduct applies here. If, after reading that, you are unclear, then please pick another project to work on. The maintainers will not hesitate to enforce a code of conduct.
License EngineBlock is licensed under the Apache License, version 2.0. If you wish to contribute your code to this project, you must be willing to use this license. All code contributed here is presumed to be licensed automatically as such.</description>
    </item>
    
    <item>
      <title>Activity Internals</title>
      <link>http://docs.engineblock.io/dev-guide/activity_internals/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/activity_internals/</guid>
      <description>Activities are a generalization of some type of client work that needs to occur to generate work against a test target. However, a purely abstract interface for activities would be so open-ended that it would provide no common scaffolding. On the contrary, we do want some sense of isomorphism between activity types in terms of how they are implemented and reasoned about. After reading this document, you should know what it means to implement an activity properly&amp;ndash; building on the core machinery while adding in activity-type behavior appropriately.</description>
    </item>
    
    <item>
      <title>Building ActivityTypes</title>
      <link>http://docs.engineblock.io/dev-guide/building_activities/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/building_activities/</guid>
      <description>Requirements  Java 8 Maven  Building new Activity Types  Add the engineblock API to your project via Maven:  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.engineblock&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eb-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.17&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt;   Implement the ActivityType interface. Use the [Annotated Diag ActivityType] as a reference point as needed. Add your new ActivityType implementation to the EngineBlock classpath. File Issues against the EngineBlock Project for any doc or API enhancements that you need.  Working directly on engineblock You can download and locally build EngineBlock.</description>
    </item>
    
    <item>
      <title>Diag ActivityType</title>
      <link>http://docs.engineblock.io/dev-guide/annotated_diag/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/annotated_diag/</guid>
      <description>If you take all the code chunks from this document and concatenate them together, you&amp;rsquo;ll have &amp;lsquo;diag&amp;rsquo;, one of the in-build activity types for EngineBlock.
First, we annotate our ActivityType implementation, name DiagActivityType, with the @AutoService annotation. This is a simple way to manage your ServiceLoader configurations. For more information, see AutoService.
@AutoService(ActivityType.class)  DiagActivityType is an ActivityType Let&amp;rsquo;s implement an ActivityType. Actually, let&amp;rsquo;s make it useful for something besides default behavior.</description>
    </item>
    
    <item>
      <title>Project Structure</title>
      <link>http://docs.engineblock.io/dev-guide/contributing/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/contributing/</guid>
      <description>Conduct It&amp;rsquo;s simple really. Everything in the Open Code of Conduct applies here. If, after reading that, you are unclear, then please pick another project to work on. The maintainers will not hesitate to enforce a code of conduct.
License EngineBlock is licensed under the Apache License, version 2.0. If you wish to contribute your code to this project, you must be willing to use this license. All code contributed here is presumed to be licensed automatically as such.</description>
    </item>
    
    <item>
      <title>Project Structure</title>
      <link>http://docs.engineblock.io/dev-guide/project_structure/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/project_structure/</guid>
      <description>EngineBlock is packaged as a Maven Reactor project.
Defaults and Dependencies Maven reactor projects often confuse developers. In this document, we&amp;rsquo;ll explain the basic structure of the EngineBlock project and the reasons for it.
Firstly, there is a parent for each of the modules. In Maven parlance, you can think of a parent project as a template for projects that reference it. One of the reasons you would do this is to simply common build or dependency settings across many maven projects or modules.</description>
    </item>
    
    <item>
      <title>Scripting Extensions</title>
      <link>http://docs.engineblock.io/dev-guide/scripting_extensions/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/scripting_extensions/</guid>
      <description>Requirements  Java 8 Maven dependency:  Scripting Extensions When a new scripting environment is initialized in EngineBlock, a new instance of each scripting extension is published into it as a variable. This variable acts as a named service endpoint within the scripting environment. For example, an extension for saving a JSON map to disk could be published into the scripting environment as &amp;ldquo;savejson&amp;rdquo;, and you might invoke it as &amp;ldquo;savejson.</description>
    </item>
    
  </channel>
</rss>