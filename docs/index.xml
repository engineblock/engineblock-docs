<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EngineBlock Users Guide on EngineBlock</title>
    <link>http://docs.engineblock.io/</link>
    <description>Recent content in EngineBlock Users Guide on EngineBlock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://docs.engineblock.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concepts</title>
      <link>http://docs.engineblock.io/user-guide/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/concepts/</guid>
      <description>EngineBlock is a machine pattern for test design and execution. This guide is intended to illustrate the moving parts and how they work together.
Scenario EngineBlock executes performance testing scenarios in a Nashorn scripting environment. The scenario is in the form of a script, either constructed on-the-fly from the command line options, or directly created by a scenario designer.
Activity A scenario can have multiple activities. Each activity runs independently of the others, and independently of the control flow of the scenario script.</description>
    </item>
    
    <item>
      <title>Coordinated Omission</title>
      <link>http://docs.engineblock.io/user-guide/coordinated_omission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/coordinated_omission/</guid>
      <description>Coordinated omission is a term of art coined by Gil Tene. In practice, coordinated omission follows from the fact that all systems have finite concurrency and scheduling capacity, including the clients that test them. While the term doesn&amp;rsquo;t cover all important aspects of scale and performance testing, it does put a focus on a particularly troublesome problem that often occurs with testing methods where effective concurrency is a meaningful limitation.</description>
    </item>
    
    <item>
      <title>Scenario Scripting</title>
      <link>http://docs.engineblock.io/user-guide/scenario_scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/scenario_scripting/</guid>
      <description>Motive The EngineBlock runtime is a combination of a scripting sandbox and a workload execution machine. This is not accidental. With this particular arrangement, it should be possible to build sophisticated tests across a variety of scenarios. In particular, logic which can observe and react to the system under test can be powerful. With this approach, it becomes possible to break away from the conventional run-interpret-adjust cycle which is all too often done by human hands.</description>
    </item>
    
    <item>
      <title>Standard Metrics</title>
      <link>http://docs.engineblock.io/user-guide/standard_metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/standard_metrics/</guid>
      <description>Engineblock comes with a set of standard metrics that will be part of every activity type. Each activity type enhances the metrics available by adding their own metrics with the engineblock APIs. This section explains what the standard metrics are, and how to interpret them.
read-input Within engineblock, a data stream provider called an Input is responsible for providing the actual cycle number that will be used by consumer threads.</description>
    </item>
    
    <item>
      <title>Timing Terms</title>
      <link>http://docs.engineblock.io/user-guide/timing_terms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/timing_terms/</guid>
      <description>Often, terms used to describe latency can create confusion. In fact, the term latency is so overloaded in practice that it is not useful by itself. Because of this, EngineBlock will avoid using the term latency except in a specific way. Instead, the terms described in this section will be used.
EngineBlock is a client-centric testing tool. The measurement of operations occurs on the client, without visibility to what happens in transport or on the server.</description>
    </item>
    
    <item>
      <title>Using Metrics</title>
      <link>http://docs.engineblock.io/user-guide/using_metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/using_metrics/</guid>
      <description>Unit of Measure All metrics collected from activities are recorded in nanoseconds and ops per second. All histograms are recorded with 4 digits of precision using HDR histograms.
Metric Outputs Metrics from a scenario run can be gathered in multiple ways:
 In the log output In CSV files In HDR histogram logs In Histogram Stats logs (CSV) To a monitoring system via graphite  These forms may be combined and used in combination.</description>
    </item>
    
    <item>
      <title>Parameter Usage</title>
      <link>http://docs.engineblock.io/parameters/parameter_usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/parameters/parameter_usage/</guid>
      <description>To configure an EngineBlock activity to do something meaningful, you have to provide parameters to it. This can occur in one of several ways. This section is a guide on EngineBlock parameters, how they layer together, and when to use one form over another.
Command Line The command line is used to configure both the overall EngineBlock runtime (logging, etc) as well as the individual activities and scripts. Global EngineBLock options can be distinguished from scenario commands and their parameters because because global options always start with a single or double hyphen.</description>
    </item>
    
    <item>
      <title>YAML Config API</title>
      <link>http://docs.engineblock.io/dev-guide/standard_yam_devl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/standard_yam_devl/</guid>
      <description>In the EngineBlock 2.* and newer versions, a standard YAML configuration format is provided that makes it easy to use for any activity that requires statements, tags, parameters and data bindings. This section describes how to use it as a developer*. Developers should already be familiar with the user guide for the YAML config format first.
Simple Usage StrInterpolater interpolator = new StrInterpolater(activityDef); String yaml_loc = activityDef.getParams().getOptionalString(&amp;quot;yaml&amp;quot;).orElse(&amp;quot;default&amp;quot;); StmtsDocList sdl = StatementsLoader.</description>
    </item>
    
    <item>
      <title>Command Line</title>
      <link>http://docs.engineblock.io/user-guide/command_line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/command_line/</guid>
      <description>To get built-in help on the available command line options, run
java -jar eb.jar --help  The most common and useful commands will be explained at some depth in this guide, however the built-in help above will be complete, with proper syntax for all commands.
There is more than one way to invoke EngineBlock. The sections below explain more about them, with more detail about how EngineBlock works as you read further.</description>
    </item>
    
    <item>
      <title>Example Command</title>
      <link>http://docs.engineblock.io/parameters/example_command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/parameters/example_command/</guid>
      <description>Most new users will be interested in a command line pattern that looks very much like this:
./eb... run type=stdout alias=test1 yaml=mystmts cycles=5M -v  This is basically telling EngineBlock to load an activity type known as stdout, naming it test1, with an input interval between 0 (inclusive) and 5000000 (exclusive), with statements and any other settings loaded from the file test1.yaml, using the the Standard YAML. This is a very common usage pattern for tools based on EngineBlock.</description>
    </item>
    
    <item>
      <title>Activity Params</title>
      <link>http://docs.engineblock.io/parameters/activity_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/parameters/activity_params/</guid>
      <description>Activity parameters are passed as named arguments for an activity, either on the command line or via a scenario script. On the command line, these take the form of
&amp;lt;paramname&amp;gt;=&amp;lt;paramvalue&amp;gt;  Some activity parameters are universal in that they can be used with any activity type. These parameters are recognized by EngineBlock whether or not they are recognized by a particular activity type implementation. These are called universal activity parameters.</description>
    </item>
    
    <item>
      <title>Statement Params</title>
      <link>http://docs.engineblock.io/parameters/statement_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/parameters/statement_params/</guid>
      <description>Statement parameters apply to the defined operations for an activity. Statement parameters are always configurable as part of a params block in YAML, for activities that use the Standard YAML format.
In some cases, an Activity Parameter of the same name can be used to establish a default value. In that case, it will be documented here with the parameter description.
ratio ratio: &amp;lt;ratio&amp;gt;
Determines the frequency of the affected statements in the operational sequence.</description>
    </item>
    
    <item>
      <title>Activity Internals</title>
      <link>http://docs.engineblock.io/dev-guide/activity_internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/activity_internals/</guid>
      <description>Activities are a generalization of some type of client work that needs to occur to generate work against a test target. However, a purely abstract interface for activities would be so open-ended that it would provide no common scaffolding. On the contrary, we do want some sense of isomorphism between activity types in terms of how they are implemented and reasoned about. After reading this document, you should know what it means to implement an activity properly&amp;ndash; building on the core machinery while adding in activity-type behavior appropriately.</description>
    </item>
    
    <item>
      <title>Building ActivityTypes</title>
      <link>http://docs.engineblock.io/dev-guide/building_activities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/building_activities/</guid>
      <description>Requirements  Java 8 Maven  Building new Activity Types  Add the engineblock API to your project via Maven:  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.engineblock&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eb-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.17&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt;   Implement the ActivityType interface. Use the [Annotated Diag ActivityType] as a reference point as needed. Add your new ActivityType implementation to the EngineBlock classpath. File Issues against the EngineBlock Project for any doc or API enhancements that you need.  Working directly on engineblock You can download and locally build EngineBlock.</description>
    </item>
    
    <item>
      <title>CLI Scripting</title>
      <link>http://docs.engineblock.io/user-guide/cli_scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/cli_scripting/</guid>
      <description>Sometimes you want to to run a set of workloads in a particular order, or call other specific test setup logic in between phases or workloads. While the full scripting environment allows you to do this and more, it is not necessary to write javascript for every scenario.
For more basic setup and sequencing needs, you can achive a fair degree of flexibility on the command line. A few key API calls are supported directly on the command line.</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://docs.engineblock.io/dev-guide/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/contributing/</guid>
      <description>Conduct It&amp;rsquo;s simple really. Everything in the Contributor Covenant applies here. If, after reading that, you are unclear, then please pick another project to work on. The maintainers will not hesitate to enforce a code of conduct.
License EngineBlock is licensed under the Apache License, version 2.0. If you wish to contribute your code to this project, you must be willing to use this license. All code contributed here is presumed to be licensed as such, and the maintainers may add licenses to contributed files or add commit-level requirements for clear licensing headers.</description>
    </item>
    
    <item>
      <title>Diag ActivityType</title>
      <link>http://docs.engineblock.io/dev-guide/annotated_diag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/annotated_diag/</guid>
      <description>This section is out of date, and will be updated after the next major release with details on building async activity types.
 If you take all the code chunks from this document and concatenate them together, you&amp;rsquo;ll have &amp;lsquo;diag&amp;rsquo;, one of the in-build activity types for EngineBlock.
All activity types are annotated for inclusion in META-INF/services/ActivityType to be found at runtime by the ServiceLoader API. This is done by an upstream annotation io.</description>
    </item>
    
    <item>
      <title>Project Structure</title>
      <link>http://docs.engineblock.io/dev-guide/project_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/project_structure/</guid>
      <description>EngineBlock is packaged as a Maven Reactor project.
Defaults and Dependencies Maven reactor projects often confuse developers. In this document, we&amp;rsquo;ll explain the basic structure of the EngineBlock project and the reasons for it.
Firstly, there is a parent for each of the modules. In Maven parlance, you can think of a parent project as a template for projects that reference it. One of the reasons you would do this is to simply common build or dependency settings across many maven projects or modules.</description>
    </item>
    
    <item>
      <title>Scripting Extensions</title>
      <link>http://docs.engineblock.io/dev-guide/scripting_extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/scripting_extensions/</guid>
      <description>Requirements  Java 8 Maven dependency:  Scripting Extensions When a new scripting environment is initialized in EngineBlock, a new instance of each scripting extension is published into it as a variable. This variable acts as a named service endpoint within the scripting environment. For example, an extension for saving a JSON map to disk could be published into the scripting environment as &amp;ldquo;savejson&amp;rdquo;, and you might invoke it as &amp;ldquo;savejson.</description>
    </item>
    
    <item>
      <title>Slot Assembly</title>
      <link>http://docs.engineblock.io/historic/internals_slot_assembly/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/historic/internals_slot_assembly/</guid>
      <description>This is superceded with recent changes and needs to be rewritten It is currently inaccurate and will be rewritten shortly Understanding Slot Assembly If you are building new ActionType implementations for EngineBlock, it can help to understand the creational patterns used for slot assembly.
What is Slot Assembly? Slot assembly in this context simply refers the logic that determines how to assemble a motor, input, and action instance together for a numbered slot within an activity.</description>
    </item>
    
    <item>
      <title>YAML Config</title>
      <link>http://docs.engineblock.io/user-guide/standard_yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/standard_yaml/</guid>
      <description>In the EngineBlock 2.* and newer versions, a standard YAML configuration format is provided that makes it easy to use for any activity that requires statements, tags, parameters and data bindings. In practice, any useful activity types have needed these. This section describes the standard YAML format and how to use it.
A valid config file for an activity consists of statements, parameters for those statements, bindings for the data to use with those statements, and tags for selecting statements for an activity.</description>
    </item>
    
    <item>
      <title>Design Guidelines</title>
      <link>http://docs.engineblock.io/dev-guide/design_guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/design_guidelines/</guid>
      <description>These guidelines are partially aspirational. As the project evolves, attempts will be made to codify these guidelines and measure them on a per-release basis.
ActivityType Naming Each activity type should be named with a single lowercase name that is accurate and stable. Any activity type implementations submitted to the engineblock project may be changed by the project maintainers to ensure this.
ActivityType Documentation Each activity type should have a file which provides markdown-formatted documentation for the user.</description>
    </item>
    
    <item>
      <title>Async Operations</title>
      <link>http://docs.engineblock.io/dev-guide/async_operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/async_operations/</guid>
      <description>This section is out of date, and will be updated after the next major release with details on building async activity types.
 Introduction In EngineBlock, two types of activities are supported: sync or async. Going forward, the async interface will be refined and hardened, and then the sync interface will be deprecated. This is simply a matter of simplifying the API over time, and the async interface is the essential one.</description>
    </item>
    
    <item>
      <title>Error Mapping</title>
      <link>http://docs.engineblock.io/dev-guide/error_mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/error_mapping/</guid>
      <description>Each activity type should provide its own mapping between thrown errors and the error codes assigned to them.
This is facilitated by the ErrorMapper interface. It simply provides a way to initialize a cache-friendly view of classes which are known exception types to a stable numbering of error codes.
By providing an error mapper for your activity type, you are enabling advanced testing scenarios that deal with error routing and advanced error handling.</description>
    </item>
    
  </channel>
</rss>