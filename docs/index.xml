<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EngineBlock</title>
    <link>http://docs.engineblock.io/</link>
    <description>Recent content on EngineBlock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>APL 2.0</copyright>
    <lastBuildDate>Fri, 19 May 2017 21:52:57 +0000</lastBuildDate>
    
	<atom:link href="http://docs.engineblock.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concepts</title>
      <link>http://docs.engineblock.io/user-guide/concepts/</link>
      <pubDate>Fri, 19 May 2017 21:52:57 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/concepts/</guid>
      <description>EngineBlock (EB) is a machine pattern for load test design and execution. This guide is intended to illustrate the moving parts and how they work together.
Scenario EngineBlock executes performance testing scenarios in a Nashorn scripting environment. The scenario is in the form of a script, either constructed on-the-fly from the command line options, or directly created by a scenario designer.
Activity A scenario can have multiple activities. Each activity runs independently of the others, and independently of the control flow of the scenario script.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>http://docs.engineblock.io/user-guide/metrics/</link>
      <pubDate>Fri, 19 May 2017 21:52:57 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/metrics/</guid>
      <description>Unit of Measure All metrics collected from activities are recorded in nanoseconds and ops per second. All histograms are recorded with 4 digits of precision using HDR histograms.
Collecting Metrics If you like to have all of your testing data in one place, then you may be interested in reporting your measurements to a monitoring system. For this, EB includes a Metrics Library. Graphite reporting is baked in as the default reporter.</description>
    </item>
    
    <item>
      <title>Scenario Scripting</title>
      <link>http://docs.engineblock.io/user-guide/scripting/</link>
      <pubDate>Fri, 19 May 2017 21:52:57 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/scripting/</guid>
      <description>Motive The EngineBlock runtime is a combination of a scripting sandbox and a workload execution machine. This is not accidental. With this particular arrangement, it should be possible to build sophisticated tests across a variety of scenarios. In particular, logic which can observe and react to the system under test can be powerful. With this approach, it becomes possible to break away from the conventional run-interpret-adjust cycle which is all too often done by human hands.</description>
    </item>
    
    <item>
      <title>YAML Config</title>
      <link>http://docs.engineblock.io/user-guide/standard_yaml/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/standard_yaml/</guid>
      <description>In the EngineBlock 2.* and newer versions, a standard YAML configuration format is provided that makes it easy to use for any activity that requires statements, tags, parameters and data bindings. In practice, any useful activity types have needed these. This section describes the standard YAML format and how to use it.
A valid config file for an activity consists of statements, parameters for those statements, bindings for the data to use with those statements, and tags for selecting statements for an activity.</description>
    </item>
    
    <item>
      <title>YAML Config API</title>
      <link>http://docs.engineblock.io/dev-guide/standard_yam_devl/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/standard_yam_devl/</guid>
      <description>In the EB 2.* and newer versions, a standard YAML configuration format is provided that makes it easy to use for any activity that requires statements, tags, parameters and data bindings. This section describes how to use it as a developer*. Developers should already be familiar with the user guide for the YAML config format first.
Simple Usage StrInterpolater interpolator = new StrInterpolater(activityDef); String yaml_loc = activityDef.getParams().getOptionalString(&amp;quot;yaml&amp;quot;).orElse(&amp;quot;default&amp;quot;); StmtsDocList sdl = StatementsLoader.</description>
    </item>
    
    <item>
      <title>YAML Config Errors</title>
      <link>http://docs.engineblock.io/user-guide/standard_yaml_errors/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/standard_yaml_errors/</guid>
      <description>This page describes errors that you might see if you have a YAML loading issue, and what you can do to fix them.
Diagnostic Guide Undefined Name-Statement Tuple This exception is thrown when the statement body is not found in a statement definition in any of the supported formats. For example, the following block will cause an error:
statements: - name: statement-foo params: aparam: avalue  This is because name and params are reserved property names &amp;ndash; removed from the list of name-value pairs before free parameters are read.</description>
    </item>
    
    <item>
      <title>Activity Design Template</title>
      <link>http://docs.engineblock.io/sketches/activity_design_template/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/activity_design_template/</guid>
      <description>  digraph tracking { graph [splines=polyline,overlap=orthoxy]; rankdir=LR; node[shape=&amp;#34;box&amp;#34;] { rank=source; idle; } idle-&amp;gt;runphase runphase -&amp;gt; tryphase record_phase -&amp;gt; idle; subgraph cluster_error { label=&amp;#34;error flow&amp;#34; record_error; handle_error; } subgraph cluster_success { label=&amp;#34;success flow&amp;#34; success; record_success; } tryphase-&amp;gt; success-&amp;gt; record_success; tryphase-&amp;gt; handle_error -&amp;gt; record_error; record_error -&amp;gt; tryphase; record_success,record_error -&amp;gt; record_phase; }     digraph disposition { rankdir=TB; node[shape=box] cycle-&amp;gt;try_next_phase; subgraph cluster_cycle { record_cycle; try_next_phase; finish_cycle; label=&amp;#34;cycle execution&amp;#34;; maybe_continue_cycle; subgraph cluster_phase { label=&amp;#34;phase execution&amp;#34; try_phase; record_phase; subgraph cluster_phase_error { label=&amp;#34;exception&amp;#34;; error; record_error; maybe_retry_phase; } subgraph cluster_phase_success { label=&amp;#34;normal&amp;#34;; success; record_success; } } try_next_phase -&amp;gt; try_phase; try_phase -&amp;gt; success -&amp;gt; record_success -&amp;gt; record_phase -&amp;gt; maybe_continue_cycle; maybe_continue_cycle -&amp;gt; try_next_phase; try_phase -&amp;gt; error -&amp;gt; record_error -&amp;gt; maybe_retry_phase -&amp;gt; record_phase; maybe_retry_phase -&amp;gt; try_phase; maybe_continue_cycle -&amp;gt; record_cycle -&amp;gt; finish_cycle; } }   </description>
    </item>
    
    <item>
      <title>Command Line</title>
      <link>http://docs.engineblock.io/user-guide/command_line/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/command_line/</guid>
      <description>To get built-in help on the available command line options, run
java -jar eb.jar --help  The most common and useful commands will be explained at some depth in this guide, however the built-in help above will be complete, with proper syntax for all commands.
There is more than one way to invoke EngineBlock. The sections below explain more about them, with more detail about how EngineBlock works as you read further.</description>
    </item>
    
    <item>
      <title>Cycle Tracking</title>
      <link>http://docs.engineblock.io/sketches/tracking/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/tracking/</guid>
      <description>See also: Tracking, Visually
 Synopsis When coordinating activities with each other, it is necessary to link the completion status of an activity to the inputs available to another. Doing this concurrently and efficiently presents some interesting challenges.
Some testing scenarios require that you are able to take the results of one phase of testing as input to another phase. For example, you may want to simply visit created data in a later phase to verify that it is accurate.</description>
    </item>
    
    <item>
      <title>Ring Tracking</title>
      <link>http://docs.engineblock.io/sketches/ring_tracking/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/ring_tracking/</guid>
      <description>This schematic is an attempt to explain a very basic pattern. It really is a simple pattern, but it sometimes helps to have visuals to get newer users grounded in the concepts.
Why Ring Tracking? The tracking mechanisms in EngineBlock serve two purposes:
 To coordinate cycle number dispatch between collaborating activities. To coordinate cycle result values between enhanced activities that know how to use them, or for intermediate cycle number filters that scrutinize the result codes provided by an upstream activity.</description>
    </item>
    
    <item>
      <title>Scripting Histograms</title>
      <link>http://docs.engineblock.io/sketches/scripting_histograms/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/scripting_histograms/</guid>
      <description>Histogram-based analysis is one of the most effective methods for performance characterization. However, there is not enough flexibility in how the existing tools work to support the scripting needs in EngineBlock. This document outlines the problems with the existing tool in the context of advanced scripting and a design for how to collect and use histogram data effectively.
The Accuracy Challenge When making analysis decisions from histogram data, you need full delta snapshots between measurement times.</description>
    </item>
    
    <item>
      <title>Tracking Diagrams</title>
      <link>http://docs.engineblock.io/sketches/tracking_visually/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/tracking_visually/</guid>
      <description>This section lays out visually some of the design challenges in the cycle tracking design. The diagrams are very basic, but serve as a basis for discussion and elaboration.
Scenario: A -&amp;gt; B  digraph sys1 { rankdir=LR; node[shape=box] edge[dir=out] state[label=&amp;#34;Internal state&amp;#34;]; A -&amp;gt; marker; marker -&amp;gt; state; state -&amp;gt; tracker; tracker -&amp;gt; B; }   Internal State  digraph d { a[shape=&amp;#34;record&amp;#34;,label=&amp;#34;0|1|2|3|4|5|6|7|8|9|10|11|...&amp;#34;]; }   Pacing Data Only For pacing purposes, in which a consuming tracker watches the state of a producing marker, the only state that is necessary to record is whether a given cycle has been completed.</description>
    </item>
    
    <item>
      <title>Vega Test</title>
      <link>http://docs.engineblock.io/sketches/vegatest/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/vegatest/</guid>
      <description>// Vega here below  { &amp;#34;$schema&amp;#34;: &amp;#34;https://vega.github.io/schema/vega/v3.0.json&amp;#34;, &amp;#34;width&amp;#34;: 400, &amp;#34;height&amp;#34;: 200, &amp;#34;padding&amp;#34;: 5, &amp;#34;data&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;table&amp;#34;, &amp;#34;values&amp;#34;: [ {&amp;#34;category&amp;#34;: &amp;#34;A&amp;#34;, &amp;#34;amount&amp;#34;: 28}, {&amp;#34;category&amp;#34;: &amp;#34;B&amp;#34;, &amp;#34;amount&amp;#34;: 55}, {&amp;#34;category&amp;#34;: &amp;#34;C&amp;#34;, &amp;#34;amount&amp;#34;: 43}, {&amp;#34;category&amp;#34;: &amp;#34;D&amp;#34;, &amp;#34;amount&amp;#34;: 91}, {&amp;#34;category&amp;#34;: &amp;#34;E&amp;#34;, &amp;#34;amount&amp;#34;: 81}, {&amp;#34;category&amp;#34;: &amp;#34;F&amp;#34;, &amp;#34;amount&amp;#34;: 53}, {&amp;#34;category&amp;#34;: &amp;#34;G&amp;#34;, &amp;#34;amount&amp;#34;: 19}, {&amp;#34;category&amp;#34;: &amp;#34;H&amp;#34;, &amp;#34;amount&amp;#34;: 87} ] } ], &amp;#34;signals&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;tooltip&amp;#34;, &amp;#34;value&amp;#34;: {}, &amp;#34;on&amp;#34;: [ {&amp;#34;events&amp;#34;: &amp;#34;rect:mouseover&amp;#34;, &amp;#34;update&amp;#34;: &amp;#34;datum&amp;#34;}, {&amp;#34;events&amp;#34;: &amp;#34;rect:mouseout&amp;#34;, &amp;#34;update&amp;#34;: &amp;#34;{}&amp;#34;} ] } ], &amp;#34;scales&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;band&amp;#34;, &amp;#34;domain&amp;#34;: {&amp;#34;data&amp;#34;: &amp;#34;table&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;category&amp;#34;}, &amp;#34;range&amp;#34;: &amp;#34;width&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;yscale&amp;#34;, &amp;#34;domain&amp;#34;: {&amp;#34;data&amp;#34;: &amp;#34;table&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;amount&amp;#34;}, &amp;#34;nice&amp;#34;: true, &amp;#34;range&amp;#34;: &amp;#34;height&amp;#34; } ], &amp;#34;axes&amp;#34;: [ { &amp;#34;orient&amp;#34;: &amp;#34;bottom&amp;#34;, &amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34; }, { &amp;#34;orient&amp;#34;: &amp;#34;left&amp;#34;, &amp;#34;scale&amp;#34;: &amp;#34;yscale&amp;#34; } ], &amp;#34;marks&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rect&amp;#34;, &amp;#34;from&amp;#34;: {&amp;#34;data&amp;#34;:&amp;#34;table&amp;#34;}, &amp;#34;encode&amp;#34;: { &amp;#34;enter&amp;#34;: { &amp;#34;x&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;category&amp;#34;, &amp;#34;offset&amp;#34;: 1}, &amp;#34;width&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;band&amp;#34;: 1, &amp;#34;offset&amp;#34;: -1}, &amp;#34;y&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;yscale&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;amount&amp;#34;}, &amp;#34;y2&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;yscale&amp;#34;, &amp;#34;value&amp;#34;: 0} }, &amp;#34;update&amp;#34;: { &amp;#34;fill&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;steelblue&amp;#34;} }, &amp;#34;hover&amp;#34;: { &amp;#34;fill&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;red&amp;#34;} } } }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;encode&amp;#34;: { &amp;#34;enter&amp;#34;: { &amp;#34;align&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;center&amp;#34;}, &amp;#34;baseline&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;bottom&amp;#34;}, &amp;#34;fill&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;#333&amp;#34;} }, &amp;#34;update&amp;#34;: { &amp;#34;x&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;signal&amp;#34;: &amp;#34;tooltip.</description>
    </item>
    
    <item>
      <title>User Guide</title>
      <link>http://docs.engineblock.io/user-guide/</link>
      <pubDate>Fri, 19 May 2017 22:00:36 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/</guid>
      <description> This is the user&amp;rsquo;s guide.
This is another section </description>
    </item>
    
    <item>
      <title>Activity Internals</title>
      <link>http://docs.engineblock.io/dev-guide/activity_internals/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/activity_internals/</guid>
      <description>Activities are a generalization of some type of client work that needs to occur to generate work against a test target. However, a purely abstract interface for activities would be so open-ended that it would provide no common scaffolding. On the contrary, we do want some sense of isomorphism between activity types in terms of how they are implemented and reasoned about. After reading this document, you should know what it means to implement an activity properly&amp;ndash; building on the core machinery while adding in activity-type behavior appropriately.</description>
    </item>
    
    <item>
      <title>Building ActivityTypes</title>
      <link>http://docs.engineblock.io/dev-guide/building_activities/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/building_activities/</guid>
      <description>Requirements  Java 8 Maven  Building new Activity Types  Add the engineblock API to your project via Maven:  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.engineblock&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eb-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.17&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt;   Implement the ActivityType interface. Use the [Annotated Diag ActivityType] as a reference point as needed. Add your new ActivityType implementation to the EngineBlock classpath. File Issues against the EngineBlock Project for any doc or API enhancements that you need.  Working directly on engineblock You can download and locally build EngineBlock.</description>
    </item>
    
    <item>
      <title>CLI Scripting</title>
      <link>http://docs.engineblock.io/user-guide/cli_scripting/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/cli_scripting/</guid>
      <description>Sometimes you want to to run a set of workloads in a particular order, or call other specific test setup logic in between phases or workloads. While the full scripting environment allows you to do this and more, it is not necessary to write javascript for every scenario.
For more basic setup and sequencing needs, you can achive a fair degree of flexibility on the command line. A few key API calls are supported directly on the command line.</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://docs.engineblock.io/dev-guide/contributing/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/contributing/</guid>
      <description>Conduct It&amp;rsquo;s simple really. Everything in the Open Code of Conduct applies here. If, after reading that, you are unclear, then please pick another project to work on. The maintainers will not hesitate to enforce a code of conduct.
License EngineBlock is licensed under the Apache License, version 2.0. If you wish to contribute your code to this project, you must be willing to use this license. All code contributed here is presumed to be licensed automatically as such.</description>
    </item>
    
    <item>
      <title>Diag ActivityType</title>
      <link>http://docs.engineblock.io/dev-guide/annotated_diag/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/annotated_diag/</guid>
      <description>If you take all the code chunks from this document and concatenate them together, you&amp;rsquo;ll have &amp;lsquo;diag&amp;rsquo;, one of the in-build activity types for EngineBlock.
First, we annotate our ActivityType implementation, name DiagActivityType, with the @AutoService annotation. This is a simple way to manage your ServiceLoader configurations. For more information, see AutoService.
@AutoService(ActivityType.class)  DiagActivityType is an ActivityType Let&amp;rsquo;s implement an ActivityType. Actually, let&amp;rsquo;s make it useful for something besides default behavior.</description>
    </item>
    
    <item>
      <title>Project Structure</title>
      <link>http://docs.engineblock.io/dev-guide/project_structure/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/project_structure/</guid>
      <description>EngineBlock is packaged as a Maven Reactor project.
Defaults and Dependencies Maven reactor projects often confuse developers. In this document, we&amp;rsquo;ll explain the basic structure of the EngineBlock project and the reasons for it.
Firstly, there is a parent for each of the modules. In Maven parlance, you can think of a parent project as a template for projects that reference it. One of the reasons you would do this is to simply common build or dependency settings across many maven projects or modules.</description>
    </item>
    
    <item>
      <title>Scripting Extensions</title>
      <link>http://docs.engineblock.io/dev-guide/scripting_extensions/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/scripting_extensions/</guid>
      <description>Requirements  Java 8 Maven dependency:  Scripting Extensions When a new scripting environment is initialized in EngineBlock, a new instance of each scripting extension is published into it as a variable. This variable acts as a named service endpoint within the scripting environment. For example, an extension for saving a JSON map to disk could be published into the scripting environment as &amp;ldquo;savejson&amp;rdquo;, and you might invoke it as &amp;ldquo;savejson.</description>
    </item>
    
    <item>
      <title>Slot Assembly</title>
      <link>http://docs.engineblock.io/historic/internals_slot_assembly/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/historic/internals_slot_assembly/</guid>
      <description>This is superceded with recent changes and needs to be rewritten It is currently inaccurate and will be rewritten shortly Understanding Slot Assembly If you are building new ActionType implementations for EngineBlock, it can help to understand the creational patterns used for slot assembly.
What is Slot Assembly? Slot assembly in this context simply refers the logic that determines how to assemble a motor, input, and action instance together for a numbered slot within an activity.</description>
    </item>
    
    <item>
      <title>Design Sketches</title>
      <link>http://docs.engineblock.io/sketches/</link>
      <pubDate>Fri, 19 May 2017 21:51:26 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/</guid>
      <description>This section holds design sketches of some of the more esoteric design elements of EngineBlock.
 scripting_histograms tracking tracking, visually ring tracking tracking concepts  </description>
    </item>
    
    <item>
      <title>Tracking Concepts</title>
      <link>http://docs.engineblock.io/sketches/tracking_concepts/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/tracking_concepts/</guid>
      <description>This section is meant to clarify some of the concepts used within engineblock for marking results of one activity and tracking them for use by other activities.
Activities and Cycles As before, all activities running within an engineblock scenario iterate on cycles. Whereas before, each activity would operate exclusively on a contiguous interval of cycles, now activities can operate on a set of cycles which are not contiguous. Still, the cycles must be in order.</description>
    </item>
    
    <item>
      <title>EngineBlock Dev Guide</title>
      <link>http://docs.engineblock.io/dev-guide/</link>
      <pubDate>Fri, 19 May 2017 21:52:39 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/dev-guide/</guid>
      <description>Conduct It&amp;rsquo;s simple really. Everything in the Open Code of Conduct applies here. If, after reading that, you are unclear, then please pick another project to work on. The maintainers will not hesitate to enforce a code of conduct.
License EngineBlock is licensed under the Apache License, version 2.0. If you wish to contribute your code to this project, you must be willing to use this license. All code contributed here is presumed to be licensed automatically as such.</description>
    </item>
    
    <item>
      <title>EngineBlock Users Guide</title>
      <link>http://docs.engineblock.io/</link>
      <pubDate>Fri, 19 May 2017 21:52:39 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/</guid>
      <description>EngineBlock is a new power tool in the test tooling arsenal.
The design goals:
 Provide a useful and intuitive Reusable Machine Pattern for constructing and reasoning about concurrent performance tests. To encourage this, the runtime machinery is based on simple and tangible core concepts. Reduce testing time of complex scenarios with many variables. This is achieved by controlling tests from an open javascript sandbox. This makes more sophisticated scenarios possible when needed.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://docs.engineblock.io/quickstart/</link>
      <pubDate>Fri, 19 May 2017 21:51:26 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/quickstart/</guid>
      <description>Getting EngineBlock The latest release can always be run with this simple script: run-eb. You can use the commands below to get it.
curl -O https://raw.githubusercontent.com/engineblock/engineblock/master/eb-cli/bin/run-eb chmod u+x run-eb ./run-eb help  This script demonstrates how to fetch the version of the latest published artifact via maven central search. It also downloads that artifact if it doesn&amp;rsquo;t find it locally cached within the last 2 days.
A cautionary word: As always, blindly running scripts from the web is not a good idea.</description>
    </item>
    
  </channel>
</rss>