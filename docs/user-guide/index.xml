<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User Guide on EngineBlock</title>
    <link>http://docs.engineblock.io/user-guide/</link>
    <description>Recent content in User Guide on EngineBlock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://docs.engineblock.io/user-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concepts</title>
      <link>http://docs.engineblock.io/user-guide/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/concepts/</guid>
      <description>EngineBlock is a machine pattern for test design and execution. This guide is intended to illustrate the moving parts and how they work together.
Scenario EngineBlock executes performance testing scenarios in a Nashorn scripting environment. The scenario is in the form of a script, either constructed on-the-fly from the command line options, or directly created by a scenario designer.
Activity A scenario can have multiple activities. Each activity runs independently of the others, and independently of the control flow of the scenario script.</description>
    </item>
    
    <item>
      <title>Coordinated Omission</title>
      <link>http://docs.engineblock.io/user-guide/coordinated_omission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/coordinated_omission/</guid>
      <description>Coordinated omission is a term of art coined by Gil Tene. In practice, coordinated omission follows from the fact that all systems have finite concurrency and scheduling capacity, including the clients that test them. While the term doesn&amp;rsquo;t cover all important aspects of scale and performance testing, it does put a focus on a particularly troublesome problem that often occurs with testing methods where effective concurrency is a meaningful limitation.</description>
    </item>
    
    <item>
      <title>Scenario Scripting</title>
      <link>http://docs.engineblock.io/user-guide/scenario_scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/scenario_scripting/</guid>
      <description>Motive The EngineBlock runtime is a combination of a scripting sandbox and a workload execution machine. This is not accidental. With this particular arrangement, it should be possible to build sophisticated tests across a variety of scenarios. In particular, logic which can observe and react to the system under test can be powerful. With this approach, it becomes possible to break away from the conventional run-interpret-adjust cycle which is all too often done by human hands.</description>
    </item>
    
    <item>
      <title>Standard Metrics</title>
      <link>http://docs.engineblock.io/user-guide/standard_metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/standard_metrics/</guid>
      <description>Engineblock comes with a set of standard metrics that will be part of every activity type. Each activity type enhances the metrics available by adding their own metrics with the engineblock APIs. This section explains what the standard metrics are, and how to interpret them.
read-input Within engineblock, a data stream provider called an Input is responsible for providing the actual cycle number that will be used by consumer threads.</description>
    </item>
    
    <item>
      <title>Timing Terms</title>
      <link>http://docs.engineblock.io/user-guide/timing_terms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/timing_terms/</guid>
      <description>Often, terms used to describe latency can create confusion. In fact, the term latency is so overloaded in practice that it is not useful by itself. Because of this, EngineBlock will avoid using the term latency except in a specific way. Instead, the terms described in this section will be used.
EngineBlock is a client-centric testing tool. The measurement of operations occurs on the client, without visibility to what happens in transport or on the server.</description>
    </item>
    
    <item>
      <title>Using Metrics</title>
      <link>http://docs.engineblock.io/user-guide/using_metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/using_metrics/</guid>
      <description>Unit of Measure All metrics collected from activities are recorded in nanoseconds and ops per second. All histograms are recorded with 4 digits of precision using HDR histograms.
Metric Outputs Metrics from a scenario run can be gathered in multiple ways:
 In the log output In CSV files In HDR histogram logs In Histogram Stats logs (CSV) To a monitoring system via graphite  These forms may be combined and used in combination.</description>
    </item>
    
    <item>
      <title>Command Line</title>
      <link>http://docs.engineblock.io/user-guide/command_line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/command_line/</guid>
      <description>To get built-in help on the available command line options, run
java -jar eb.jar --help  The most common and useful commands will be explained at some depth in this guide, however the built-in help above will be complete, with proper syntax for all commands.
There is more than one way to invoke EngineBlock. The sections below explain more about them, with more detail about how EngineBlock works as you read further.</description>
    </item>
    
    <item>
      <title>CLI Scripting</title>
      <link>http://docs.engineblock.io/user-guide/cli_scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/cli_scripting/</guid>
      <description>Sometimes you want to to run a set of workloads in a particular order, or call other specific test setup logic in between phases or workloads. While the full scripting environment allows you to do this and more, it is not necessary to write javascript for every scenario.
For more basic setup and sequencing needs, you can achive a fair degree of flexibility on the command line. A few key API calls are supported directly on the command line.</description>
    </item>
    
    <item>
      <title>YAML Config</title>
      <link>http://docs.engineblock.io/user-guide/standard_yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/user-guide/standard_yaml/</guid>
      <description>In the EngineBlock 2.* and newer versions, a standard YAML configuration format is provided that makes it easy to use for any activity that requires statements, tags, parameters and data bindings. In practice, any useful activity types have needed these. This section describes the standard YAML format and how to use it.
A valid config file for an activity consists of statements, parameters for those statements, bindings for the data to use with those statements, and tags for selecting statements for an activity.</description>
    </item>
    
  </channel>
</rss>