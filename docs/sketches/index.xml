<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sketches on EngineBlock</title>
    <link>http://docs.engineblock.io/sketches/</link>
    <description>Recent content in Sketches on EngineBlock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>APL 2.0</copyright>
    <lastBuildDate>Fri, 19 May 2017 22:09:53 +0000</lastBuildDate>
    
	<atom:link href="http://docs.engineblock.io/sketches/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tracking Concepts</title>
      <link>http://docs.engineblock.io/sketches/tracking_concepts/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/tracking_concepts/</guid>
      <description>This section is meant to clarify some of the concepts used within engineblock for marking results of one activity and tracking them for use by other activities.
Activities and Cycles As before, all activities running within an engineblock scenario iterate on cycles. Whereas before, each activity would operate exclusively on a contiguous interval of cycles, now activities can operate on a set of cycles which are not contiguous. Still, the cycles must be in order.</description>
    </item>
    
    <item>
      <title>Cycle Tracking</title>
      <link>http://docs.engineblock.io/sketches/tracking/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/tracking/</guid>
      <description>See also: Tracking, Visually
 Synopsis When coordinating activities with each other, it is necessary to link the completion status of an activity to the inputs available to another. Doing this concurrently and efficiently presents some interesting challenges.
Some testing scenarios require that you are able to take the results of one phase of testing as input to another phase. For example, you may want to simply visit created data in a later phase to verify that it is accurate.</description>
    </item>
    
    <item>
      <title>Ring Tracking</title>
      <link>http://docs.engineblock.io/sketches/ring_tracking/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/ring_tracking/</guid>
      <description>This schematic is an attempt to explain a very basic pattern. It really is a simple pattern, but it sometimes helps to have visuals to get newer users grounded in the concepts.
Why Ring Tracking? The tracking mechanisms in EngineBlock serve two purposes:
 To coordinate cycle number dispatch between collaborating activities. To coordinate cycle result values between enhanced activities that know how to use them, or for intermediate cycle number filters that scrutinize the result codes provided by an upstream activity.</description>
    </item>
    
    <item>
      <title>Scripting Histograms</title>
      <link>http://docs.engineblock.io/sketches/scripting_histograms/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/scripting_histograms/</guid>
      <description>Histogram-based analysis is one of the most effective methods for performance characterization. However, there is not enough flexibility in how the existing tools work to support the scripting needs in EngineBlock. This document outlines the problems with the existing tool in the context of advanced scripting and a design for how to collect and use histogram data effectively.
The Accuracy Challenge When making analysis decisions from histogram data, you need full delta snapshots between measurement times.</description>
    </item>
    
    <item>
      <title>Tracking Diagrams</title>
      <link>http://docs.engineblock.io/sketches/tracking_visually/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/tracking_visually/</guid>
      <description>This section lays out visually some of the design challenges in the cycle tracking design. The diagrams are very basic, but serve as a basis for discussion and elaboration.
Scenario: A -&amp;gt; B  digraph sys1 { rankdir=LR; node[shape=box] edge[dir=out] state[label=&amp;#34;Internal state&amp;#34;]; A -&amp;gt; marker; marker -&amp;gt; state; state -&amp;gt; tracker; tracker -&amp;gt; B; }   Internal State  digraph d { a[shape=&amp;#34;record&amp;#34;,label=&amp;#34;0|1|2|3|4|5|6|7|8|9|10|11|...&amp;#34;]; }   Pacing Data Only For pacing purposes, in which a consuming tracker watches the state of a producing marker, the only state that is necessary to record is whether a given cycle has been completed.</description>
    </item>
    
    <item>
      <title>Vega Test</title>
      <link>http://docs.engineblock.io/sketches/vegatest/</link>
      <pubDate>Fri, 19 May 2017 22:09:53 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/vegatest/</guid>
      <description>// Vega here below  { &amp;#34;$schema&amp;#34;: &amp;#34;https://vega.github.io/schema/vega/v3.0.json&amp;#34;, &amp;#34;width&amp;#34;: 400, &amp;#34;height&amp;#34;: 200, &amp;#34;padding&amp;#34;: 5, &amp;#34;data&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;table&amp;#34;, &amp;#34;values&amp;#34;: [ {&amp;#34;category&amp;#34;: &amp;#34;A&amp;#34;, &amp;#34;amount&amp;#34;: 28}, {&amp;#34;category&amp;#34;: &amp;#34;B&amp;#34;, &amp;#34;amount&amp;#34;: 55}, {&amp;#34;category&amp;#34;: &amp;#34;C&amp;#34;, &amp;#34;amount&amp;#34;: 43}, {&amp;#34;category&amp;#34;: &amp;#34;D&amp;#34;, &amp;#34;amount&amp;#34;: 91}, {&amp;#34;category&amp;#34;: &amp;#34;E&amp;#34;, &amp;#34;amount&amp;#34;: 81}, {&amp;#34;category&amp;#34;: &amp;#34;F&amp;#34;, &amp;#34;amount&amp;#34;: 53}, {&amp;#34;category&amp;#34;: &amp;#34;G&amp;#34;, &amp;#34;amount&amp;#34;: 19}, {&amp;#34;category&amp;#34;: &amp;#34;H&amp;#34;, &amp;#34;amount&amp;#34;: 87} ] } ], &amp;#34;signals&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;tooltip&amp;#34;, &amp;#34;value&amp;#34;: {}, &amp;#34;on&amp;#34;: [ {&amp;#34;events&amp;#34;: &amp;#34;rect:mouseover&amp;#34;, &amp;#34;update&amp;#34;: &amp;#34;datum&amp;#34;}, {&amp;#34;events&amp;#34;: &amp;#34;rect:mouseout&amp;#34;, &amp;#34;update&amp;#34;: &amp;#34;{}&amp;#34;} ] } ], &amp;#34;scales&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;band&amp;#34;, &amp;#34;domain&amp;#34;: {&amp;#34;data&amp;#34;: &amp;#34;table&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;category&amp;#34;}, &amp;#34;range&amp;#34;: &amp;#34;width&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;yscale&amp;#34;, &amp;#34;domain&amp;#34;: {&amp;#34;data&amp;#34;: &amp;#34;table&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;amount&amp;#34;}, &amp;#34;nice&amp;#34;: true, &amp;#34;range&amp;#34;: &amp;#34;height&amp;#34; } ], &amp;#34;axes&amp;#34;: [ { &amp;#34;orient&amp;#34;: &amp;#34;bottom&amp;#34;, &amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34; }, { &amp;#34;orient&amp;#34;: &amp;#34;left&amp;#34;, &amp;#34;scale&amp;#34;: &amp;#34;yscale&amp;#34; } ], &amp;#34;marks&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rect&amp;#34;, &amp;#34;from&amp;#34;: {&amp;#34;data&amp;#34;:&amp;#34;table&amp;#34;}, &amp;#34;encode&amp;#34;: { &amp;#34;enter&amp;#34;: { &amp;#34;x&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;category&amp;#34;, &amp;#34;offset&amp;#34;: 1}, &amp;#34;width&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;band&amp;#34;: 1, &amp;#34;offset&amp;#34;: -1}, &amp;#34;y&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;yscale&amp;#34;, &amp;#34;field&amp;#34;: &amp;#34;amount&amp;#34;}, &amp;#34;y2&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;yscale&amp;#34;, &amp;#34;value&amp;#34;: 0} }, &amp;#34;update&amp;#34;: { &amp;#34;fill&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;steelblue&amp;#34;} }, &amp;#34;hover&amp;#34;: { &amp;#34;fill&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;red&amp;#34;} } } }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;encode&amp;#34;: { &amp;#34;enter&amp;#34;: { &amp;#34;align&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;center&amp;#34;}, &amp;#34;baseline&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;bottom&amp;#34;}, &amp;#34;fill&amp;#34;: {&amp;#34;value&amp;#34;: &amp;#34;#333&amp;#34;} }, &amp;#34;update&amp;#34;: { &amp;#34;x&amp;#34;: {&amp;#34;scale&amp;#34;: &amp;#34;xscale&amp;#34;, &amp;#34;signal&amp;#34;: &amp;#34;tooltip.</description>
    </item>
    
    <item>
      <title>Design Sketches</title>
      <link>http://docs.engineblock.io/sketches/</link>
      <pubDate>Fri, 19 May 2017 21:51:26 +0000</pubDate>
      
      <guid>http://docs.engineblock.io/sketches/</guid>
      <description>This section holds design sketches of some of the more esoteric design elements of EngineBlock.
 scripting_histograms tracking tracking, visually ring tracking tracking concepts  </description>
    </item>
    
  </channel>
</rss>